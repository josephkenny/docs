{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to the documentation site for Project Books ! Book Project The Book Project is currently a book tracker. This allows readers to track books they would like to read, are currently reading, have read or did not finish. We're looking to expand the Book Project to become a book platform for readers where they can interact with other readers to find the next good book to read. We're using Java with Spring Boot, React with TypeScript, MySQL and other technologies to build this. We started the Book Project out of a desire for a substantially better Goodreads, but we're also looking to redefine the experience at every step. For more information, see our vision for the Book Project and our FAQs . Books API The Books API is a GraphQL API that stores books, authors, publishers and more. It is written in Java using Spring Boot and the DGS framework. The Books API is a sibling and supporting project to the Book Project . However, it has also been designed to be standalone. Curating and maintaining a large and high-quality selection of books is hard. We hope that by providing a good, easy-to-use API, others who also consume our API may want to contribute back by adding books to our collection.","title":"Home"},{"location":"#home","text":"Welcome to the documentation site for Project Books !","title":"Home"},{"location":"#book-project","text":"The Book Project is currently a book tracker. This allows readers to track books they would like to read, are currently reading, have read or did not finish. We're looking to expand the Book Project to become a book platform for readers where they can interact with other readers to find the next good book to read. We're using Java with Spring Boot, React with TypeScript, MySQL and other technologies to build this. We started the Book Project out of a desire for a substantially better Goodreads, but we're also looking to redefine the experience at every step. For more information, see our vision for the Book Project and our FAQs .","title":"Book Project"},{"location":"#books-api","text":"The Books API is a GraphQL API that stores books, authors, publishers and more. It is written in Java using Spring Boot and the DGS framework. The Books API is a sibling and supporting project to the Book Project . However, it has also been designed to be standalone. Curating and maintaining a large and high-quality selection of books is hard. We hope that by providing a good, easy-to-use API, others who also consume our API may want to contribute back by adding books to our collection.","title":"Books API"},{"location":"code-of-conduct/","text":"Code of Conduct Please ensure that you remain familiar with this document as it may change from time to time. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualised language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting If someone has a problem with something that you said, please don't get defensive. Instead, stop doing what they complained about, even if you don't think you did anything wrong or if what you said was misinterpreted. It may be the case that you could have better communicated what you said. Ultimately, we're trying to make this a place where we can all get along. Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies in project spaces (e.g. the wiki, pull requests, any documentation and code) and in public spaces (such as our Slack workspace) when an individual is representing the project or its community. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project owner 1 at bookproject@madebykarankumar.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies will be posted in due course. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. For more information about how violations will be handled, see the resolutions document . Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq A part of the 'our standards' section has been adapted from the Rust code of conduct . Notes If the leadership expands to a team, this will be changed to email addresses of two different maintainers (in case the complaint is at the project owner)","title":"Code of conduct"},{"location":"code-of-conduct/#code-of-conduct","text":"Please ensure that you remain familiar with this document as it may change from time to time.","title":"Code of Conduct"},{"location":"code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualised language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting If someone has a problem with something that you said, please don't get defensive. Instead, stop doing what they complained about, even if you don't think you did anything wrong or if what you said was misinterpreted. It may be the case that you could have better communicated what you said. Ultimately, we're trying to make this a place where we can all get along.","title":"Our Standards"},{"location":"code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code-of-conduct/#scope","text":"This Code of Conduct applies in project spaces (e.g. the wiki, pull requests, any documentation and code) and in public spaces (such as our Slack workspace) when an individual is representing the project or its community.","title":"Scope"},{"location":"code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project owner 1 at bookproject@madebykarankumar.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies will be posted in due course. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. For more information about how violations will be handled, see the resolutions document .","title":"Enforcement"},{"location":"code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq A part of the 'our standards' section has been adapted from the Rust code of conduct .","title":"Attribution"},{"location":"code-of-conduct/#notes","text":"If the leadership expands to a team, this will be changed to email addresses of two different maintainers (in case the complaint is at the project owner)","title":"Notes"},{"location":"contributing/","text":"Contributing Thank you for taking an interest in contributing! Please note that by contributing to any of our projects, you are expected to adhere to this contributing document. Please also ensure that you remain familiar with this contributing document as it may change from time to time. Code of Conduct By contributing to this project, you are expected to adhere to our Code of Conduct . Contents Ways to contribute Receiving a response Open-ended discussions Before making changes Tell us which issue you want to work on New contributors assigned to at most one issue at a time Discuss your implementation approach Ensure your email address on your commits are correct Rewriting pushed commits with a different email address Workflow Commit messages One problem per patch Squashing Commits Code contributions Writing tests New files Pull requests Merge conflicts Resolving conversations Stale issues & pull requests Unassigning yourself Ways to contribute Code: adding new features, fixing bugs and general refactoring to name a few Code reviews: either offering to review a pull request on Slack or if you see a pull request and think the code could be improved, feel free to offer suggestions on how to do so. This can help improve our code quality and is much appreciated! Before reviewing code, please ensure you are familiar with and understand our code reviews document Issues and pull requests labelled with needs-repro have yet to be reproduced. If you're able to reproduce it, letting us know would help a lot Our test coverage is low, so we need a lot more tests, particularly the areas that are undertested or not covered at all Documentation: improvements (including fixing typos!) to files such as our READMEs, any wiki page, any of our style guides, comments in source files, this contributing document or the code of conduct . Design: helping to design the UI and UX of the web app through prototypes (such as wireframes and drawings) Feedback: we're eager to find new ways to improve, so please do let us know! Start a new idea discussion on GitHub Triage: help us to triage issues and pull requests In addition to the above, you can get involved in shaping the future of the project over on Slack. Receiving a response We aim to respond to all messages (on Slack and on GitHub) within seven days. Similarly, we aim to review all pull requests within seven days of receiving it in a review state. If you haven't received a response, feel free to mention @knjk04 or get in touch on Slack. Open-ended discussions Open-ended discussions are best made over our public #help channel on our Slack workspace. Unless specified otherwise, this applies when you're not assigned to the issue at hand. Examples of when to take a discussion over to Slack: If you disagree with an issue (e.g. if you don't think it's needed or there is a better way of doing something) If you would like to make comments, suggestions or amendments to our style guide If you would like to comment on the overall direction of the project The reason for this is because we don't want to make discussions on issues or pull requests longer than they need to be. For example, creating an open-ended discussion on a pull-request code review can distract away from the actual code review and confuse the contributor assigned to the pull request (i.e. it's off-topic). Before making changes Tell us which issue you want to work on This applies to both code and documentation changes. If an issue already exists for what you want to work and it is unassigned, and it is not labelled as blocked , feel free to let us know that you want to work on it. We can then assign you to it. If an issue doesn't already exist, please create one and then let us know that you are happy to work on it. Letting us know which issue you want to work on before working on it helps to minimise the chances of duplicated work. New contributors assigned to at most one issue at a time If you have a new contributor (have not yet contributed to the project), we ask that you only request to be assigned to one issue. Only once your corresponding pull has been merged can you request to be assigned to other issues (more than one). The reason for this restriction is because we have had people ask to be assigned to an issue but then, for whatever reason, not work on it. We don't want to find ourselves in a situation where multiple issues are assigned to one person who then does not deliver. We want to keep our project alive at a good pace. Discuss your implementation approach After having been assigned to a ticket, please discuss your implementation approach with us first before working on it. It may be the case that you make a good change, but it isn't what we are looking for. Moreover, there may be a better way of doing something. This step can help to save both your time and our time in the long run :) Ensure your email address on your commits are correct If your email address that you are committing with does not match the email address associated with your GitHub account, you won't show up as a contributor on our repository or on your profile. In the above image, the contributor's avatar is the same as the avatar on their GitHub profile. In addition, their username (highlighted) is a link to their GitHub profile. This won't be the case if you haven't set things up correctly. You can check the email address in your git config with the following command: $ git config user.email You can then ensure that this matches the email address on your GitHub account (look in 'Settings'). For more information, see GitHub's documentation page on 'Why are my contributions not showing up on my profile?' . Rewriting pushed commits with a different email address Step 1: While on your feature branch, run $ git rebase -i HEAD~n where n are the number of commits you would like to change This will then open your commits in the default text editor for Git (which may be Vim or Vi, so you may wish to change this if you prefer a different editor). Step 2: Change the lines with 'pick' to 'edit' and then save and quit the file Step 3: $ git commit --amend --author= \"[Your name] [your email address as shown on GitHub]\" --no-edit Step 4: $ git rebase --continue You'll need to run steps 3 and 4 n number of times, where n represents the number of commits that you are rewriting. Step 5: Once you've finished with the rebase, force push: $ git push -f origin [your-branch-name] Workflow Please follow the process below: Tell us which issue you want to work on Discuss your implementation approach with us Fork the repository Create a new branch off main (unless the corresponding issue says otherwise). Your branch should have a descriptive branch name (that corresponds to the relevant issue) and include the issue number (e.g. add-styleguide-1048 ) Please do not use quotation marks or apostrophes in your branch name Bring your branch level with the branch you're going to be branching into before submitting a pull request (we recommend rebasing) i.e. if you're going to be branch off main , then rebase new changes from main onto your branch Submit a pull request to merge into the branch specified on the issue (or main if a branch is not specified) Commit messages Use the present tense (e.g. \"add converter\", not \"added converter\") Ensure your commit messages are descriptive (i.e. a commit message should effectively summarise what change(s) you made) In line with this, you may want to break up your contribution into smaller commits Generally speaking, the default GitHub commit messages (e.g. add [file] or update [file] ) are not sufficient One problem per patch For every patch (i.e. pull request) you make, please ensure it solves one problem. If you want to solve multiple problems, please spread them across multiple patches -- one patch per problem. This makes it easier to keep track of what changes were made in what branch or pull request when looking back. Additionally, it makes code reviews go a lot quicker and smoother. Squashing commits If you need to fix a small issue (e.g. fixing typos), address review feedback or fix a failing build, please squash your commits. This can be done using an interactive rebase: $ git rebase -i HEAD~n where n represents the number of last commits. You can then change the commit that you want to squash with the previous by changing the word 'pick' to 'squash'. When pushing the changes, you'll need to force push (e.g. git push -f origin add-avatar ). Syncing your fork You can keep your fork up-to-date by first creating a remote for the upstream and then syncing your fork . Code contributions Please adhere to our relevant code style guide(s) for the issue you are working on. Before submitting a pull request, run the unit tests locally and ensure they pass. Writing tests Generally speaking, if you're working on a new feature (any issue with the enhancement label ) or fixing a bug , please also write tests. If you need a hand with this, we can help. We highly recommend following a test-driven development approach. New files If you're adding a new file, please ensure to copy the contents of our copyright file verbatim (use the latest version on the main branch). Pull requests If you've opened a pull request but it is not yet ready for a review, please convert it to a draft. Otherwise, we may help you out by adding to your branch while you're also working on it if the changes needed are small or if the work needs to be completed quickly (e.g. if it is a high priority bug or if it is blocking other work). The same applies for pull requests where we've requested changes -- mark it as a draft until you're ready for another review. Merge conflicts We expect you to resolve any merge conflicts that appear when you have a pull request. This includes when you first create the pull request and at any point later on if merge conflicts appear before your pull request is merged. This is to minimise the time spent reviewers spend reviewing pull requests, but it is may also provide you with the opportunity to change or adapt your work based on new changes. Resolving conversations It is best to leave resolving a conversation (e.g. a review comment) to the reviewer that created it. This way, they can check for themselves whether the suggestion was implemented as desired. Stale issues & pull requests If you have been assigned to an issue and we have not heard back to you for a week (either through a message or seeing a pull request you made), we will send a friendly message asking whether everything is OK and whether you need a hand. If you need more time, the work is non-urgent and is not blocking anyone, that's completely fine, just let us know. If possible, try to let us know how long it will take you to submit a ready-to-review pull request. If we have not heard back from you one week after our friendly reminder (i.e. two weeks after you were first assigned to the issue), we will unassign you from the issue. This is so that we can assign someone else to the issue. Pull requests are similar. We will send a friendly reminder after one week of receiving the pull request or receiving your last message. If we don't hear back from you, we will close the pull request and label it as stale . For urgent work, such as fixing important bugs or work that is blocking others, a similar process will be followed but with shorter timescales. Exactly how long depends on the severity of the stale work. Where possible, we will inform you whether an issue is important so that you can know before picking it up. For high priority bugs, we recommend that you only take it up if you can commit to finishing it reasonably quickly. The reason that we ask to be kept informed is so that we don't find ourselves assigning work and then never hearing back from the contributor. In turn, this allows us to progress with the project at a good pace. Unassigning yourself If you no longer wish to work an issue, that's fine. All we ask is that you let us know. If you unassign yourself from the issue, we don't get notified, so a quick message (no explanation required) will do. We can then assign it to someone else. Where possible, please let us know as soon as possible if you no longer wish to work on an issue. Please also consider that you're finding something difficult on the issue you're assigned to, we're here to help on Slack.","title":"Contributing"},{"location":"contributing/#contributing","text":"Thank you for taking an interest in contributing! Please note that by contributing to any of our projects, you are expected to adhere to this contributing document. Please also ensure that you remain familiar with this contributing document as it may change from time to time.","title":"Contributing"},{"location":"contributing/#code-of-conduct","text":"By contributing to this project, you are expected to adhere to our Code of Conduct .","title":"Code of Conduct"},{"location":"contributing/#contents","text":"Ways to contribute Receiving a response Open-ended discussions Before making changes Tell us which issue you want to work on New contributors assigned to at most one issue at a time Discuss your implementation approach Ensure your email address on your commits are correct Rewriting pushed commits with a different email address Workflow Commit messages One problem per patch Squashing Commits Code contributions Writing tests New files Pull requests Merge conflicts Resolving conversations Stale issues & pull requests Unassigning yourself","title":"Contents"},{"location":"contributing/#ways-to-contribute","text":"Code: adding new features, fixing bugs and general refactoring to name a few Code reviews: either offering to review a pull request on Slack or if you see a pull request and think the code could be improved, feel free to offer suggestions on how to do so. This can help improve our code quality and is much appreciated! Before reviewing code, please ensure you are familiar with and understand our code reviews document Issues and pull requests labelled with needs-repro have yet to be reproduced. If you're able to reproduce it, letting us know would help a lot Our test coverage is low, so we need a lot more tests, particularly the areas that are undertested or not covered at all Documentation: improvements (including fixing typos!) to files such as our READMEs, any wiki page, any of our style guides, comments in source files, this contributing document or the code of conduct . Design: helping to design the UI and UX of the web app through prototypes (such as wireframes and drawings) Feedback: we're eager to find new ways to improve, so please do let us know! Start a new idea discussion on GitHub Triage: help us to triage issues and pull requests In addition to the above, you can get involved in shaping the future of the project over on Slack.","title":"Ways to contribute"},{"location":"contributing/#receiving-a-response","text":"We aim to respond to all messages (on Slack and on GitHub) within seven days. Similarly, we aim to review all pull requests within seven days of receiving it in a review state. If you haven't received a response, feel free to mention @knjk04 or get in touch on Slack.","title":"Receiving a response"},{"location":"contributing/#open-ended-discussions","text":"Open-ended discussions are best made over our public #help channel on our Slack workspace. Unless specified otherwise, this applies when you're not assigned to the issue at hand. Examples of when to take a discussion over to Slack: If you disagree with an issue (e.g. if you don't think it's needed or there is a better way of doing something) If you would like to make comments, suggestions or amendments to our style guide If you would like to comment on the overall direction of the project The reason for this is because we don't want to make discussions on issues or pull requests longer than they need to be. For example, creating an open-ended discussion on a pull-request code review can distract away from the actual code review and confuse the contributor assigned to the pull request (i.e. it's off-topic).","title":"Open-ended discussions"},{"location":"contributing/#before-making-changes","text":"","title":"Before making changes"},{"location":"contributing/#tell-us-which-issue-you-want-to-work-on","text":"This applies to both code and documentation changes. If an issue already exists for what you want to work and it is unassigned, and it is not labelled as blocked , feel free to let us know that you want to work on it. We can then assign you to it. If an issue doesn't already exist, please create one and then let us know that you are happy to work on it. Letting us know which issue you want to work on before working on it helps to minimise the chances of duplicated work.","title":"Tell us which issue you want to work on"},{"location":"contributing/#new-contributors-assigned-to-at-most-one-issue-at-a-time","text":"If you have a new contributor (have not yet contributed to the project), we ask that you only request to be assigned to one issue. Only once your corresponding pull has been merged can you request to be assigned to other issues (more than one). The reason for this restriction is because we have had people ask to be assigned to an issue but then, for whatever reason, not work on it. We don't want to find ourselves in a situation where multiple issues are assigned to one person who then does not deliver. We want to keep our project alive at a good pace.","title":"New contributors assigned to at most one issue at a time"},{"location":"contributing/#discuss-your-implementation-approach","text":"After having been assigned to a ticket, please discuss your implementation approach with us first before working on it. It may be the case that you make a good change, but it isn't what we are looking for. Moreover, there may be a better way of doing something. This step can help to save both your time and our time in the long run :)","title":"Discuss your implementation approach"},{"location":"contributing/#ensure-your-email-address-on-your-commits-are-correct","text":"If your email address that you are committing with does not match the email address associated with your GitHub account, you won't show up as a contributor on our repository or on your profile. In the above image, the contributor's avatar is the same as the avatar on their GitHub profile. In addition, their username (highlighted) is a link to their GitHub profile. This won't be the case if you haven't set things up correctly. You can check the email address in your git config with the following command: $ git config user.email You can then ensure that this matches the email address on your GitHub account (look in 'Settings'). For more information, see GitHub's documentation page on 'Why are my contributions not showing up on my profile?' .","title":"Ensure your email address on your commits are correct"},{"location":"contributing/#rewriting-pushed-commits-with-a-different-email-address","text":"Step 1: While on your feature branch, run $ git rebase -i HEAD~n where n are the number of commits you would like to change This will then open your commits in the default text editor for Git (which may be Vim or Vi, so you may wish to change this if you prefer a different editor). Step 2: Change the lines with 'pick' to 'edit' and then save and quit the file Step 3: $ git commit --amend --author= \"[Your name] [your email address as shown on GitHub]\" --no-edit Step 4: $ git rebase --continue You'll need to run steps 3 and 4 n number of times, where n represents the number of commits that you are rewriting. Step 5: Once you've finished with the rebase, force push: $ git push -f origin [your-branch-name]","title":"Rewriting pushed commits with a different email address"},{"location":"contributing/#workflow","text":"Please follow the process below: Tell us which issue you want to work on Discuss your implementation approach with us Fork the repository Create a new branch off main (unless the corresponding issue says otherwise). Your branch should have a descriptive branch name (that corresponds to the relevant issue) and include the issue number (e.g. add-styleguide-1048 ) Please do not use quotation marks or apostrophes in your branch name Bring your branch level with the branch you're going to be branching into before submitting a pull request (we recommend rebasing) i.e. if you're going to be branch off main , then rebase new changes from main onto your branch Submit a pull request to merge into the branch specified on the issue (or main if a branch is not specified)","title":"Workflow"},{"location":"contributing/#commit-messages","text":"Use the present tense (e.g. \"add converter\", not \"added converter\") Ensure your commit messages are descriptive (i.e. a commit message should effectively summarise what change(s) you made) In line with this, you may want to break up your contribution into smaller commits Generally speaking, the default GitHub commit messages (e.g. add [file] or update [file] ) are not sufficient","title":"Commit messages"},{"location":"contributing/#one-problem-per-patch","text":"For every patch (i.e. pull request) you make, please ensure it solves one problem. If you want to solve multiple problems, please spread them across multiple patches -- one patch per problem. This makes it easier to keep track of what changes were made in what branch or pull request when looking back. Additionally, it makes code reviews go a lot quicker and smoother.","title":"One problem per patch"},{"location":"contributing/#squashing-commits","text":"If you need to fix a small issue (e.g. fixing typos), address review feedback or fix a failing build, please squash your commits. This can be done using an interactive rebase: $ git rebase -i HEAD~n where n represents the number of last commits. You can then change the commit that you want to squash with the previous by changing the word 'pick' to 'squash'. When pushing the changes, you'll need to force push (e.g. git push -f origin add-avatar ).","title":"Squashing commits"},{"location":"contributing/#syncing-your-fork","text":"You can keep your fork up-to-date by first creating a remote for the upstream and then syncing your fork .","title":"Syncing your fork"},{"location":"contributing/#code-contributions","text":"Please adhere to our relevant code style guide(s) for the issue you are working on. Before submitting a pull request, run the unit tests locally and ensure they pass.","title":"Code contributions"},{"location":"contributing/#writing-tests","text":"Generally speaking, if you're working on a new feature (any issue with the enhancement label ) or fixing a bug , please also write tests. If you need a hand with this, we can help. We highly recommend following a test-driven development approach.","title":"Writing tests"},{"location":"contributing/#new-files","text":"If you're adding a new file, please ensure to copy the contents of our copyright file verbatim (use the latest version on the main branch).","title":"New files"},{"location":"contributing/#pull-requests","text":"If you've opened a pull request but it is not yet ready for a review, please convert it to a draft. Otherwise, we may help you out by adding to your branch while you're also working on it if the changes needed are small or if the work needs to be completed quickly (e.g. if it is a high priority bug or if it is blocking other work). The same applies for pull requests where we've requested changes -- mark it as a draft until you're ready for another review.","title":"Pull requests"},{"location":"contributing/#merge-conflicts","text":"We expect you to resolve any merge conflicts that appear when you have a pull request. This includes when you first create the pull request and at any point later on if merge conflicts appear before your pull request is merged. This is to minimise the time spent reviewers spend reviewing pull requests, but it is may also provide you with the opportunity to change or adapt your work based on new changes.","title":"Merge conflicts"},{"location":"contributing/#resolving-conversations","text":"It is best to leave resolving a conversation (e.g. a review comment) to the reviewer that created it. This way, they can check for themselves whether the suggestion was implemented as desired.","title":"Resolving conversations"},{"location":"contributing/#stale-issues-pull-requests","text":"If you have been assigned to an issue and we have not heard back to you for a week (either through a message or seeing a pull request you made), we will send a friendly message asking whether everything is OK and whether you need a hand. If you need more time, the work is non-urgent and is not blocking anyone, that's completely fine, just let us know. If possible, try to let us know how long it will take you to submit a ready-to-review pull request. If we have not heard back from you one week after our friendly reminder (i.e. two weeks after you were first assigned to the issue), we will unassign you from the issue. This is so that we can assign someone else to the issue. Pull requests are similar. We will send a friendly reminder after one week of receiving the pull request or receiving your last message. If we don't hear back from you, we will close the pull request and label it as stale . For urgent work, such as fixing important bugs or work that is blocking others, a similar process will be followed but with shorter timescales. Exactly how long depends on the severity of the stale work. Where possible, we will inform you whether an issue is important so that you can know before picking it up. For high priority bugs, we recommend that you only take it up if you can commit to finishing it reasonably quickly. The reason that we ask to be kept informed is so that we don't find ourselves assigning work and then never hearing back from the contributor. In turn, this allows us to progress with the project at a good pace.","title":"Stale issues &amp; pull requests"},{"location":"contributing/#unassigning-yourself","text":"If you no longer wish to work an issue, that's fine. All we ask is that you let us know. If you unassign yourself from the issue, we don't get notified, so a quick message (no explanation required) will do. We can then assign it to someone else. Where possible, please let us know as soon as possible if you no longer wish to work on an issue. Please also consider that you're finding something difficult on the issue you're assigned to, we're here to help on Slack.","title":"Unassigning yourself"},{"location":"java-styleguide/","text":"Java Style guide By contributing to this repository, you are expected to follow this style guide. Please also ensure that you remain familiar with this document as it may change from time to time. Table of Contents Introduction IDE formatting IntelliJ Eclipse Checking for violations Source files American English Source file structure No wildcard imports No line-wrapping for package & import statements Fields at the top Overloads together Newline at end of file Formatting Braces One true brace style (1TBS) 100 character column limit One statement per line Empty blocks can be concise Whitespace Vertical whitespace No horizontal alignment Optional grouping parentheses: recommended Enum classes Comment fall-through Enumerate all cases or have a default case Annotations Comments Do you need the comment? Modifiers Numeric literals Underscores in numeric literals Long suffixes Variable declarations One variable declaration per line Declare as close as possible to use Arrays No C-style array declarations Indentation 4 Spaces, no tabs Aligning method calls Naming Package names Class names Method names Constant names Non-constant field names Parameter names Local variable names Type variable names Javadoc No @author tag Programming practices Annotations Use @Override Use @VisibleForTesting Don't swallow exceptions StringBuilder over StringBuffer Overriding hashCode() and equals() Overriding toString() Short methods TODOs Prefer Optional over null Favor EnumMap over HashMap JUnit tests Given/when/then pattern Fewest number of assertions in every test Assert all for multiple assertions Disabling failing tests Using DisplayName Avoid randomness Recommended reading Updates to this document Acknowledgements Introduction Good judgement should be followed. There may be times where it is more readable to not follow a particular guideline. Readable code is preferred over code that strictly follows this guide. A short summary explaining why the guideline is in place is included to help explain the rationale behind having it. IDE formatting IDE-specific code style files have been exported and can be imported into your IDE. The files are located in the ide directory. IntelliJ For IntelliJ, you can use import the code style file . Go to File > Settings > Editor > Code Style > Java in Linux or Windows. Click on the settings cog and choose Import Scheme > IntelliJ IDEA code style XML. Eclipse If you use Eclipse, you can import the formatter file by going to Window > Preferences > Java > Code Style > Formatter and selecting the import button to import the Eclipse code style file . Checking for violations We're currently using Checkstyle to check for style guide violations. To o check for any violations, you can run the following command in the root directory of the project: $ ./mvnw validate By using the maven wrapper, you don't need to have Maven installed. Alternatively, you could run mvn validate if you do have Maven installed. Source files Use American English All code and comments should be written in English (United States). Source file structure A source file should contain the following in order: License notice and copyright information Package statement Import statements Exactly one top-level class There should be exactly one blank line to separate every section. No wildcard imports Wildcard imports, regardless of whether they are static, should not be used: // good import com.vaadin.flow.component.Component; import com.vaadin.flow.component.ComponentEventListener; // bad import com.vaadin.flow.component.*; No line-wrapping for package and import statements The package statement and import statements should not be line-wrapped. Fields at the top All fields should appear at the top of the class before any constructors. Fields should not be interspersed between methods. Overloads together Overloaded methods, including constructors, should appear together with nothing in between. Newline at end of file Every source file should have one newline at the end of the file. Formatting Braces One true brace style (1TBS) We use the One true brace style (1TBS) . // bad: braces should be used even where it is optional to do so in if, else if, while and do statements if (condition) doSomething(); // good if (condition) { doSomething(); } else { doSomethingElse(); } 100 character column limit A line should generally not exceed 100 characters. Exceptions to this rule: - package and import statements - Long URL in Javadoc One statement per line A line break should follow every statement. This includes variable declarations. Empty blocks can be concise Empty blocks can be concise providing they do not form a part of a multi-block statement. // fine void foo() {} // also fine void bar() { } // not fine if (condition) { foo(); } else { } This applies to if/else and try/catch/finally blocks. Whitespace Vertical whitespace Where there should be one blank line Between the end of one method (the closing brace) and the start of another Between groups of logical statements. This could be a group of related imports, fields, or statements within a method. Generally speaking, there should not be more than one blank line. Where there should not be one blank line Between the class name and the first field declaration (or method declaration or definition) No horizontal alignment // acceptable private int numberOfPages; private String authorFirstName; // unacceptable private int numberOfPages; private String authorFirstName; There should be no horizontal alignment. While it looks nice and improves readability, it can be harder to maintain. Optional grouping parentheses: recommended Optional grouping parentheses are recommended as they can improve readability. It can help when not everyone is clear with certain precedence rules. Enum classes If an enum class has no methods, it can be written as an array initialiser: private enum EventType { SAVED, DELETED } Comment fall-through If a case continues onto the next statement group with a break , this should be commented. Something like // fall through is sufficient. For example: switch (param) { case 1: case 2: foo(); // fall through case 3: bar(); break; default: baz(); } The final statement in the switch block, the default case above, does not require a fall-through comment. Enumerate all cases or have a default case Either cover all of the cases or use the default case. Covering all cases is the preferred approach. Annotations Annotations should appear after any javadoc for the class, field or method. Each annotation should appear on its own line. For example: @Override @Nullable public Integer getPagesReadIfPresent() { ... } However, for fields, multiple annotations can be on the same line: @NotNull @VisibleForTesting String authorFirstName; Comments This section is to do with implementation comments, not Javadoc. Comments should not be decorated with asterisks or any other characters. Do you need the comment? Only add comments where they add value. Comments should be used as a last resort. We prefer to make code readable by making the code trivial such that having a comment is redundant. Alternatively, we prefer to extract code into a method with a descriptive method name such that the method name makes the comment redundant. Modifiers Where applicable, class and member modifiers should appear in the following order, as recommended by the Java Language Specification: public protected private abstract default static final transient volatile synchronized native strictfp Numeric literals Underscores in numeric literals For numeric literals that are ten thousand or higher, underscores are recommended to separate digits by thousands: // bad int booksSold = 10000; // good int booksSold = 10_000; Long suffixes long variables should be suffixed with an uppercase L . The lowercase l should not be used as it may cause confusion with the digit 1 . For example, 1_000_000_000L instead of 1_000_000_000l . Variable declarations One variable declaration per line A variable declaration should appear on its own line. There should not be multiple declarations on one line: // good private String authorFirstName; private String authorLastName; // bad private String authorFirstName, authorLastName; Declare as close as possible to use Local variables should be declared as close as reasonably possible to where it is used. This can help limit the scope and improve readability. Local variables should not be declared at the top of a method for the sake of it. Arrays No C-style array declarations The square brackets should be next to the type name, not the variable name. This is because they a part of the type. // good String[] args // bad String args[] Indentation 4 Spaces, no tabs Four spaces should be used for indentation. This is clearer than two spaces (more than four is extraneous). This also applies to CSS. Aligning method calls An exception to the above four spaces indentation rule is aligning method calls (see below). This can improve readability. // good bookGrid.addColumn(AUTHOR_KEY) .setSortable(true); // bad bookGrid.addColumn(AUTHOR_KEY) .setSortable(true); Naming Special prefixes or suffixes, such as to represent member variables, are not used. For example, the following are not permitted: mTitle and _title . Package names Package names are written in lowercase. Consecutive words are concatenated together without any underscores. For example, com.example.readinggoal , not com.example.readingGoal or com.example.reading_goal . To aid readability, try to keep package names short and one-word names wherever possible. Class names Class names are written in PascalCase (also referred to as UpperCamelCase). Class names should be nouns or noun phrases. Interface names can be nouns or noun phrases. However, in some cases, adjectives or adjective phrases are better (e.g. Iterable ). Test classes should be the name of the class that it is testing followed by the suffix Test . For example. the test class for the GenreStatistics class should be called GenreStatisticsTest . Method names Method names are written in lowerCamelCase. Method names should usually be verb or verb phrases. For example, processTransaction or findId . Underscores are allowed in JUnit test methods to separate logical components. One popular pattern is <methodUnderTest>_<state> ; for example, pop_emptyStack . The most important thing is that the test method name clearly summarises what is being tested. Constant names Constants are written in CONSTANT_CASE. It is written in uppercase letters with each word separated by an underscore. Non-constant field names Non-constant field names, regardless of whether they are static, are written in lowerCamelCase . The names tend to be noun or noun phrases. Parameter names Parameter names are written in lowerCamelCase . Single letter parameter names should be avoided in methods (common exception: for loops). Local variables names Local variables names are written in lowerCamelCase . Even if they are immutable (e.g. marked as final ), they are not considered constants, so they are not styled as constants. Type variables names Type variables should be either: - One capital letter, which can be optionally succeeded by a letter (e.g. T , E or T2 ) - A class name followed by the capital letter T (e.g. AuthorT ) Javadoc No @author tag Author tags can quickly become outdated as methods are updated or completely written by new authors. Git is far better at tracking changes. Programming practices Annotations Use @Override The @Override annotation should be used for overridden methods. This is so that the compiler can run a check at compile-time to see whether the method annotated with @Override actually overrides a method. Use @VisibleForTesting While it is usually better to limit members and methods, if it's required for testing, it will need to be made package-private. In such cases, they should be tagged as @VisibleForTesting to make it clear. Don't swallow exceptions Rarely should there be no response to a caught exception (e.g. you may want to log it). If it is right not to do anything, then this has to be justified in a comment. An exception to ignore exceptions is if the exception is expected in a test. For example, you may want to test whether the code under test does indeed throw an exception: try { foo(-1); } catch (IndexOutOfBoundsException expected) { } In such cases, the exception parameter should be called or include the word expected , as above. StringBuilder over StringBuffer StringBuilder should be used instead of a StringBuffer for single-threaded code. Overriding hashCode() and equals() If you override hashCode() , it is good practice to also override equals() . The overrides of equals() and hashCode() should be equivalent; if x.equals(y) is true, then x.hashCode() should have the same value as y.hashCode() . Overriding toString() It is sometimes worthwhile overriding toString() for logging purposes. // OK, but could be better. The hardcoded class name has to be changed if the class name changes @Override public String toString() { return \"Book[title= \" + title + \", published = \" + published + \"]\" ; } // Better @Override public String toString() { return getClass.getName() + \"[title= \" + title + \", published = \" + published + \"]\" ; } Short methods Wherever possible, try to keep methods short (under 15 lines). This makes it easier to test, comprehend and reuse. TODOs TODO comments are acceptable and encouraged if they are useful. However, we ask that if you create a TODO, please also create a new corresponding issue. Prefer Optional over null Optional provides useful semantics that something may be null . If you need to use null s, consider using Optional s instead. Favor EnumMap over HashMap For enums, favor EnumMap over HashMap for performance reasons . JUnit tests Use AssertJ For assertions and assumptions, we're using AssertJ. We find this to be more readable (it flows nicer as it reads like a sentence) and it's easier to have a consistent team style. Given/when/then pattern The pattern we follow for JUnit tests are given/when/then. For example, given some input some setup, when an action occurs, then assert as desired. Concrete example: @Test void errorShownWhenEmailInUse() { // given userRepository.save(VALID_TEST_USER); EmailField emailField = _get(EmailField.class, spec -> spec.withId(\"email\")); // when _setValue(emailField, VALID_TEST_USER.getEmail()); // then assertThat(emailField.getErrorMessage()).isNotBlank(); } In general, we add comments to separate out the given, when and then sections. We find that this greatly improves readability. Fewest number of assertions in every test In every test method, try to minimise the number of assertions. Ideally, there should only be one. Assert all for multiple assertions If a test method needs multiple assertions, assertSoftly() should be used. Otherwise, lazy evaluation is used. For example, if you had two assertions, and both assertions fail, you will not know about the second assertion failing until you have fixed the first assertion. No disabling failing tests If a test fails, you are generally expected to fix it. We generally prefer for builds to fail rather than commenting out or disabling tests wtih the @Disable annotation. Using DisplayName All test classes should be annotated with a @DisplayName . For example, the test class TagServiceTest should be annotated with the display name TagService should . We find this greatly improves readability as the method names can be read like a sentence (e.g. TagService should findAllTags() or deleteExistingTag() ). A @DisplayName annotation should be used at a method level where it adds value. For example, you could replace a Javadoc comment with a display name. This is also useful if the method name is concise but not comprehensive. Adding a display name should be used where it serves as useful documentation. Avoid randomness While it may seem better to use pseudorandom bounded values so that you can test more cases, it rarely improves coverage. It's better to use fixed input data with well-defined edge cases. Recommended reading Clean code, Robert C. Martin Updates to this document If you change any of the recommended styles in this guide, please note that the following may also need to be changed: Checkstyle configuration IntelliJ formatter Eclipse formatter In addition, please update the table of contents. Acknowledgements This style guide has been adapted from Google's Java style guide and Twitter's common style guide .","title":"Java styleguide"},{"location":"java-styleguide/#java-style-guide","text":"By contributing to this repository, you are expected to follow this style guide. Please also ensure that you remain familiar with this document as it may change from time to time.","title":"Java Style guide"},{"location":"java-styleguide/#table-of-contents","text":"Introduction IDE formatting IntelliJ Eclipse Checking for violations Source files American English Source file structure No wildcard imports No line-wrapping for package & import statements Fields at the top Overloads together Newline at end of file Formatting Braces One true brace style (1TBS) 100 character column limit One statement per line Empty blocks can be concise Whitespace Vertical whitespace No horizontal alignment Optional grouping parentheses: recommended Enum classes Comment fall-through Enumerate all cases or have a default case Annotations Comments Do you need the comment? Modifiers Numeric literals Underscores in numeric literals Long suffixes Variable declarations One variable declaration per line Declare as close as possible to use Arrays No C-style array declarations Indentation 4 Spaces, no tabs Aligning method calls Naming Package names Class names Method names Constant names Non-constant field names Parameter names Local variable names Type variable names Javadoc No @author tag Programming practices Annotations Use @Override Use @VisibleForTesting Don't swallow exceptions StringBuilder over StringBuffer Overriding hashCode() and equals() Overriding toString() Short methods TODOs Prefer Optional over null Favor EnumMap over HashMap JUnit tests Given/when/then pattern Fewest number of assertions in every test Assert all for multiple assertions Disabling failing tests Using DisplayName Avoid randomness Recommended reading Updates to this document Acknowledgements","title":"Table of Contents"},{"location":"java-styleguide/#introduction","text":"Good judgement should be followed. There may be times where it is more readable to not follow a particular guideline. Readable code is preferred over code that strictly follows this guide. A short summary explaining why the guideline is in place is included to help explain the rationale behind having it.","title":"Introduction"},{"location":"java-styleguide/#ide-formatting","text":"IDE-specific code style files have been exported and can be imported into your IDE. The files are located in the ide directory.","title":"IDE formatting"},{"location":"java-styleguide/#intellij","text":"For IntelliJ, you can use import the code style file . Go to File > Settings > Editor > Code Style > Java in Linux or Windows. Click on the settings cog and choose Import Scheme > IntelliJ IDEA code style XML.","title":"IntelliJ"},{"location":"java-styleguide/#eclipse","text":"If you use Eclipse, you can import the formatter file by going to Window > Preferences > Java > Code Style > Formatter and selecting the import button to import the Eclipse code style file .","title":"Eclipse"},{"location":"java-styleguide/#checking-for-violations","text":"We're currently using Checkstyle to check for style guide violations. To o check for any violations, you can run the following command in the root directory of the project: $ ./mvnw validate By using the maven wrapper, you don't need to have Maven installed. Alternatively, you could run mvn validate if you do have Maven installed.","title":"Checking for violations"},{"location":"java-styleguide/#source-files","text":"","title":"Source files"},{"location":"java-styleguide/#use-american-english","text":"All code and comments should be written in English (United States).","title":"Use American English"},{"location":"java-styleguide/#source-file-structure","text":"A source file should contain the following in order: License notice and copyright information Package statement Import statements Exactly one top-level class There should be exactly one blank line to separate every section.","title":"Source file structure"},{"location":"java-styleguide/#no-wildcard-imports","text":"Wildcard imports, regardless of whether they are static, should not be used: // good import com.vaadin.flow.component.Component; import com.vaadin.flow.component.ComponentEventListener; // bad import com.vaadin.flow.component.*;","title":"No wildcard imports"},{"location":"java-styleguide/#no-line-wrapping-for-package-and-import-statements","text":"The package statement and import statements should not be line-wrapped.","title":"No line-wrapping for package and import statements"},{"location":"java-styleguide/#fields-at-the-top","text":"All fields should appear at the top of the class before any constructors. Fields should not be interspersed between methods.","title":"Fields at the top"},{"location":"java-styleguide/#overloads-together","text":"Overloaded methods, including constructors, should appear together with nothing in between.","title":"Overloads together"},{"location":"java-styleguide/#newline-at-end-of-file","text":"Every source file should have one newline at the end of the file.","title":"Newline at end of file"},{"location":"java-styleguide/#formatting","text":"","title":"Formatting"},{"location":"java-styleguide/#braces","text":"","title":"Braces"},{"location":"java-styleguide/#one-true-brace-style-1tbs","text":"We use the One true brace style (1TBS) . // bad: braces should be used even where it is optional to do so in if, else if, while and do statements if (condition) doSomething(); // good if (condition) { doSomething(); } else { doSomethingElse(); }","title":"One true brace style (1TBS)"},{"location":"java-styleguide/#100-character-column-limit","text":"A line should generally not exceed 100 characters. Exceptions to this rule: - package and import statements - Long URL in Javadoc","title":"100 character column limit"},{"location":"java-styleguide/#one-statement-per-line","text":"A line break should follow every statement. This includes variable declarations.","title":"One statement per line"},{"location":"java-styleguide/#empty-blocks-can-be-concise","text":"Empty blocks can be concise providing they do not form a part of a multi-block statement. // fine void foo() {} // also fine void bar() { } // not fine if (condition) { foo(); } else { } This applies to if/else and try/catch/finally blocks.","title":"Empty blocks can be concise"},{"location":"java-styleguide/#whitespace","text":"","title":"Whitespace"},{"location":"java-styleguide/#vertical-whitespace","text":"Where there should be one blank line Between the end of one method (the closing brace) and the start of another Between groups of logical statements. This could be a group of related imports, fields, or statements within a method. Generally speaking, there should not be more than one blank line. Where there should not be one blank line Between the class name and the first field declaration (or method declaration or definition)","title":"Vertical whitespace"},{"location":"java-styleguide/#no-horizontal-alignment","text":"// acceptable private int numberOfPages; private String authorFirstName; // unacceptable private int numberOfPages; private String authorFirstName; There should be no horizontal alignment. While it looks nice and improves readability, it can be harder to maintain.","title":"No horizontal alignment"},{"location":"java-styleguide/#optional-grouping-parentheses-recommended","text":"Optional grouping parentheses are recommended as they can improve readability. It can help when not everyone is clear with certain precedence rules.","title":"Optional grouping parentheses: recommended"},{"location":"java-styleguide/#enum-classes","text":"If an enum class has no methods, it can be written as an array initialiser: private enum EventType { SAVED, DELETED }","title":"Enum classes"},{"location":"java-styleguide/#comment-fall-through","text":"If a case continues onto the next statement group with a break , this should be commented. Something like // fall through is sufficient. For example: switch (param) { case 1: case 2: foo(); // fall through case 3: bar(); break; default: baz(); } The final statement in the switch block, the default case above, does not require a fall-through comment.","title":"Comment fall-through"},{"location":"java-styleguide/#enumerate-all-cases-or-have-a-default-case","text":"Either cover all of the cases or use the default case. Covering all cases is the preferred approach.","title":"Enumerate all cases or have a default case"},{"location":"java-styleguide/#annotations","text":"Annotations should appear after any javadoc for the class, field or method. Each annotation should appear on its own line. For example: @Override @Nullable public Integer getPagesReadIfPresent() { ... } However, for fields, multiple annotations can be on the same line: @NotNull @VisibleForTesting String authorFirstName;","title":"Annotations"},{"location":"java-styleguide/#comments","text":"This section is to do with implementation comments, not Javadoc. Comments should not be decorated with asterisks or any other characters.","title":"Comments"},{"location":"java-styleguide/#do-you-need-the-comment","text":"Only add comments where they add value. Comments should be used as a last resort. We prefer to make code readable by making the code trivial such that having a comment is redundant. Alternatively, we prefer to extract code into a method with a descriptive method name such that the method name makes the comment redundant.","title":"Do you need the comment?"},{"location":"java-styleguide/#modifiers","text":"Where applicable, class and member modifiers should appear in the following order, as recommended by the Java Language Specification: public protected private abstract default static final transient volatile synchronized native strictfp","title":"Modifiers"},{"location":"java-styleguide/#numeric-literals","text":"","title":"Numeric literals"},{"location":"java-styleguide/#underscores-in-numeric-literals","text":"For numeric literals that are ten thousand or higher, underscores are recommended to separate digits by thousands: // bad int booksSold = 10000; // good int booksSold = 10_000;","title":"Underscores in numeric literals"},{"location":"java-styleguide/#long-suffixes","text":"long variables should be suffixed with an uppercase L . The lowercase l should not be used as it may cause confusion with the digit 1 . For example, 1_000_000_000L instead of 1_000_000_000l .","title":"Long suffixes"},{"location":"java-styleguide/#variable-declarations","text":"","title":"Variable declarations"},{"location":"java-styleguide/#one-variable-declaration-per-line","text":"A variable declaration should appear on its own line. There should not be multiple declarations on one line: // good private String authorFirstName; private String authorLastName; // bad private String authorFirstName, authorLastName;","title":"One variable declaration per line"},{"location":"java-styleguide/#declare-as-close-as-possible-to-use","text":"Local variables should be declared as close as reasonably possible to where it is used. This can help limit the scope and improve readability. Local variables should not be declared at the top of a method for the sake of it.","title":"Declare as close as possible to use"},{"location":"java-styleguide/#arrays","text":"","title":"Arrays"},{"location":"java-styleguide/#no-c-style-array-declarations","text":"The square brackets should be next to the type name, not the variable name. This is because they a part of the type. // good String[] args // bad String args[]","title":"No C-style array declarations"},{"location":"java-styleguide/#indentation","text":"","title":"Indentation"},{"location":"java-styleguide/#4-spaces-no-tabs","text":"Four spaces should be used for indentation. This is clearer than two spaces (more than four is extraneous). This also applies to CSS.","title":"4 Spaces, no tabs"},{"location":"java-styleguide/#aligning-method-calls","text":"An exception to the above four spaces indentation rule is aligning method calls (see below). This can improve readability. // good bookGrid.addColumn(AUTHOR_KEY) .setSortable(true); // bad bookGrid.addColumn(AUTHOR_KEY) .setSortable(true);","title":"Aligning method calls"},{"location":"java-styleguide/#naming","text":"Special prefixes or suffixes, such as to represent member variables, are not used. For example, the following are not permitted: mTitle and _title .","title":"Naming"},{"location":"java-styleguide/#package-names","text":"Package names are written in lowercase. Consecutive words are concatenated together without any underscores. For example, com.example.readinggoal , not com.example.readingGoal or com.example.reading_goal . To aid readability, try to keep package names short and one-word names wherever possible.","title":"Package names"},{"location":"java-styleguide/#class-names","text":"Class names are written in PascalCase (also referred to as UpperCamelCase). Class names should be nouns or noun phrases. Interface names can be nouns or noun phrases. However, in some cases, adjectives or adjective phrases are better (e.g. Iterable ). Test classes should be the name of the class that it is testing followed by the suffix Test . For example. the test class for the GenreStatistics class should be called GenreStatisticsTest .","title":"Class names"},{"location":"java-styleguide/#method-names","text":"Method names are written in lowerCamelCase. Method names should usually be verb or verb phrases. For example, processTransaction or findId . Underscores are allowed in JUnit test methods to separate logical components. One popular pattern is <methodUnderTest>_<state> ; for example, pop_emptyStack . The most important thing is that the test method name clearly summarises what is being tested.","title":"Method names"},{"location":"java-styleguide/#constant-names","text":"Constants are written in CONSTANT_CASE. It is written in uppercase letters with each word separated by an underscore.","title":"Constant names"},{"location":"java-styleguide/#non-constant-field-names","text":"Non-constant field names, regardless of whether they are static, are written in lowerCamelCase . The names tend to be noun or noun phrases.","title":"Non-constant field names"},{"location":"java-styleguide/#parameter-names","text":"Parameter names are written in lowerCamelCase . Single letter parameter names should be avoided in methods (common exception: for loops).","title":"Parameter names"},{"location":"java-styleguide/#local-variables-names","text":"Local variables names are written in lowerCamelCase . Even if they are immutable (e.g. marked as final ), they are not considered constants, so they are not styled as constants.","title":"Local variables names"},{"location":"java-styleguide/#type-variables-names","text":"Type variables should be either: - One capital letter, which can be optionally succeeded by a letter (e.g. T , E or T2 ) - A class name followed by the capital letter T (e.g. AuthorT )","title":"Type variables names"},{"location":"java-styleguide/#javadoc","text":"","title":"Javadoc"},{"location":"java-styleguide/#no-author-tag","text":"Author tags can quickly become outdated as methods are updated or completely written by new authors. Git is far better at tracking changes.","title":"No @author tag"},{"location":"java-styleguide/#programming-practices","text":"","title":"Programming practices"},{"location":"java-styleguide/#annotations_1","text":"","title":"Annotations"},{"location":"java-styleguide/#use-override","text":"The @Override annotation should be used for overridden methods. This is so that the compiler can run a check at compile-time to see whether the method annotated with @Override actually overrides a method.","title":"Use @Override"},{"location":"java-styleguide/#use-visiblefortesting","text":"While it is usually better to limit members and methods, if it's required for testing, it will need to be made package-private. In such cases, they should be tagged as @VisibleForTesting to make it clear.","title":"Use @VisibleForTesting"},{"location":"java-styleguide/#dont-swallow-exceptions","text":"Rarely should there be no response to a caught exception (e.g. you may want to log it). If it is right not to do anything, then this has to be justified in a comment. An exception to ignore exceptions is if the exception is expected in a test. For example, you may want to test whether the code under test does indeed throw an exception: try { foo(-1); } catch (IndexOutOfBoundsException expected) { } In such cases, the exception parameter should be called or include the word expected , as above.","title":"Don't swallow exceptions"},{"location":"java-styleguide/#stringbuilder-over-stringbuffer","text":"StringBuilder should be used instead of a StringBuffer for single-threaded code.","title":"StringBuilder over StringBuffer"},{"location":"java-styleguide/#overriding-hashcode-and-equals","text":"If you override hashCode() , it is good practice to also override equals() . The overrides of equals() and hashCode() should be equivalent; if x.equals(y) is true, then x.hashCode() should have the same value as y.hashCode() .","title":"Overriding hashCode() and equals()"},{"location":"java-styleguide/#overriding-tostring","text":"It is sometimes worthwhile overriding toString() for logging purposes. // OK, but could be better. The hardcoded class name has to be changed if the class name changes @Override public String toString() { return \"Book[title= \" + title + \", published = \" + published + \"]\" ; } // Better @Override public String toString() { return getClass.getName() + \"[title= \" + title + \", published = \" + published + \"]\" ; }","title":"Overriding toString()"},{"location":"java-styleguide/#short-methods","text":"Wherever possible, try to keep methods short (under 15 lines). This makes it easier to test, comprehend and reuse.","title":"Short methods"},{"location":"java-styleguide/#todos","text":"TODO comments are acceptable and encouraged if they are useful. However, we ask that if you create a TODO, please also create a new corresponding issue.","title":"TODOs"},{"location":"java-styleguide/#prefer-optional-over-null","text":"Optional provides useful semantics that something may be null . If you need to use null s, consider using Optional s instead.","title":"Prefer Optional over null"},{"location":"java-styleguide/#favor-enummap-over-hashmap","text":"For enums, favor EnumMap over HashMap for performance reasons .","title":"Favor EnumMap over HashMap"},{"location":"java-styleguide/#junit-tests","text":"","title":"JUnit tests"},{"location":"java-styleguide/#use-assertj","text":"For assertions and assumptions, we're using AssertJ. We find this to be more readable (it flows nicer as it reads like a sentence) and it's easier to have a consistent team style.","title":"Use AssertJ"},{"location":"java-styleguide/#givenwhenthen-pattern","text":"The pattern we follow for JUnit tests are given/when/then. For example, given some input some setup, when an action occurs, then assert as desired. Concrete example: @Test void errorShownWhenEmailInUse() { // given userRepository.save(VALID_TEST_USER); EmailField emailField = _get(EmailField.class, spec -> spec.withId(\"email\")); // when _setValue(emailField, VALID_TEST_USER.getEmail()); // then assertThat(emailField.getErrorMessage()).isNotBlank(); } In general, we add comments to separate out the given, when and then sections. We find that this greatly improves readability.","title":"Given/when/then pattern"},{"location":"java-styleguide/#fewest-number-of-assertions-in-every-test","text":"In every test method, try to minimise the number of assertions. Ideally, there should only be one.","title":"Fewest number of assertions in every test"},{"location":"java-styleguide/#assert-all-for-multiple-assertions","text":"If a test method needs multiple assertions, assertSoftly() should be used. Otherwise, lazy evaluation is used. For example, if you had two assertions, and both assertions fail, you will not know about the second assertion failing until you have fixed the first assertion.","title":"Assert all for multiple assertions"},{"location":"java-styleguide/#no-disabling-failing-tests","text":"If a test fails, you are generally expected to fix it. We generally prefer for builds to fail rather than commenting out or disabling tests wtih the @Disable annotation.","title":"No disabling failing tests"},{"location":"java-styleguide/#using-displayname","text":"All test classes should be annotated with a @DisplayName . For example, the test class TagServiceTest should be annotated with the display name TagService should . We find this greatly improves readability as the method names can be read like a sentence (e.g. TagService should findAllTags() or deleteExistingTag() ). A @DisplayName annotation should be used at a method level where it adds value. For example, you could replace a Javadoc comment with a display name. This is also useful if the method name is concise but not comprehensive. Adding a display name should be used where it serves as useful documentation.","title":"Using DisplayName"},{"location":"java-styleguide/#avoid-randomness","text":"While it may seem better to use pseudorandom bounded values so that you can test more cases, it rarely improves coverage. It's better to use fixed input data with well-defined edge cases.","title":"Avoid randomness"},{"location":"java-styleguide/#recommended-reading","text":"Clean code, Robert C. Martin","title":"Recommended reading"},{"location":"java-styleguide/#updates-to-this-document","text":"If you change any of the recommended styles in this guide, please note that the following may also need to be changed: Checkstyle configuration IntelliJ formatter Eclipse formatter In addition, please update the table of contents.","title":"Updates to this document"},{"location":"java-styleguide/#acknowledgements","text":"This style guide has been adapted from Google's Java style guide and Twitter's common style guide .","title":"Acknowledgements"},{"location":"react-styleguide/","text":"React Style guide We have adopted Airbnb's React/JSX style guide . By contributing to this repository, you are expected to follow this style guide. Please also ensure that you remain familiar with this document as it may change from time to time.","title":"React styleguide"},{"location":"react-styleguide/#react-style-guide","text":"We have adopted Airbnb's React/JSX style guide . By contributing to this repository, you are expected to follow this style guide. Please also ensure that you remain familiar with this document as it may change from time to time.","title":"React  Style guide"},{"location":"typescript-styleguide/","text":"TypeScript Style guide By contributing to this repository, you are expected to follow this style guide. Please also ensure that you remain familiar with this document as it may change from time to time. Multiple versions of this style guide may exist throughout this repository. As with other documents on this repository, the version on the master branch should be followed, as this version should be the most up-to-date. This also encompasses our JavaScript style. Introduction Good judgement should be followed. There may be times where it is more readable to not follow a particular guideline. Readable code is preferred over code that strictly follows this guide. Where useful, a short summary explaining why the guideline is in place is included to help explain the rationale behind having it. Please note that we're using Yarn as our package manager, not npm. Files Include copyright notice All source files should start with our copyright notice attached verbatim. Formatting Lines should generally not exceed our 100 characters column limit. This is to be consistent with our Java style guide. Braces One true brace style (1TBS) We use the One true brace style (1TBS) . // bad: braces should be used even where it is optional to do so in if, else if, while and do statements if (condition) doSomething(); // good if (condition) { doSomething(); } else { doSomethingElse(); } Language Avoid using var . Instead, prefer const and let No wildcard imports (so we have one export per file) Naming Method names Method names should be written in camelCase and be be verb or verb phrases. Enum names Enum names should be written in PascalCase . Enum items are written in CONSTANT_CASE . Parameter names Parameter names should be written in camelCase . Local variable names Local variable names should be written in camelCase even where they are constants. Acknowledgements Adapted from Google's JavaScript style guide and Airbnb's JavaScript style guide .","title":"TypeScript styleguide"},{"location":"typescript-styleguide/#typescript-style-guide","text":"By contributing to this repository, you are expected to follow this style guide. Please also ensure that you remain familiar with this document as it may change from time to time. Multiple versions of this style guide may exist throughout this repository. As with other documents on this repository, the version on the master branch should be followed, as this version should be the most up-to-date. This also encompasses our JavaScript style.","title":"TypeScript Style guide"},{"location":"typescript-styleguide/#introduction","text":"Good judgement should be followed. There may be times where it is more readable to not follow a particular guideline. Readable code is preferred over code that strictly follows this guide. Where useful, a short summary explaining why the guideline is in place is included to help explain the rationale behind having it. Please note that we're using Yarn as our package manager, not npm.","title":"Introduction"},{"location":"typescript-styleguide/#files","text":"","title":"Files"},{"location":"typescript-styleguide/#include-copyright-notice","text":"All source files should start with our copyright notice attached verbatim.","title":"Include copyright notice"},{"location":"typescript-styleguide/#formatting","text":"Lines should generally not exceed our 100 characters column limit. This is to be consistent with our Java style guide.","title":"Formatting"},{"location":"typescript-styleguide/#braces","text":"","title":"Braces"},{"location":"typescript-styleguide/#one-true-brace-style-1tbs","text":"We use the One true brace style (1TBS) . // bad: braces should be used even where it is optional to do so in if, else if, while and do statements if (condition) doSomething(); // good if (condition) { doSomething(); } else { doSomethingElse(); }","title":"One true brace style (1TBS)"},{"location":"typescript-styleguide/#language","text":"Avoid using var . Instead, prefer const and let No wildcard imports (so we have one export per file)","title":"Language"},{"location":"typescript-styleguide/#naming","text":"","title":"Naming"},{"location":"typescript-styleguide/#method-names","text":"Method names should be written in camelCase and be be verb or verb phrases.","title":"Method names"},{"location":"typescript-styleguide/#enum-names","text":"Enum names should be written in PascalCase . Enum items are written in CONSTANT_CASE .","title":"Enum names"},{"location":"typescript-styleguide/#parameter-names","text":"Parameter names should be written in camelCase .","title":"Parameter names"},{"location":"typescript-styleguide/#local-variable-names","text":"Local variable names should be written in camelCase even where they are constants.","title":"Local variable names"},{"location":"typescript-styleguide/#acknowledgements","text":"Adapted from Google's JavaScript style guide and Airbnb's JavaScript style guide .","title":"Acknowledgements"}]}